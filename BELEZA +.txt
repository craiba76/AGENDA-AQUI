import React, { useEffect, useMemo, useState } from "react";
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  collection,
  doc,
  onSnapshot,
  query,
  where,
  orderBy,
  runTransaction,
  deleteDoc,
  updateDoc,
  setDoc,
} from "firebase/firestore";
import {
  getAuth,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from "firebase/auth";
import {
  getStorage,
  ref as storageRef,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage";

// ==========================
// üîß CONFIGURA√á√ÉO FIREBASE
// ==========================
// 1) Crie um projeto no Firebase
// 2) Ative Firestore, Authentication (Email/Senha) e Storage
// 3) Substitua os valores abaixo
const firebaseConfig = {
  apiKey: "SUA_API_KEY",
  authDomain: "SEU_PROJETO.firebaseapp.com",
  projectId: "SEU_PROJETO",
  storageBucket: "SEU_PROJETO.appspot.com",
  messagingSenderId: "SENDER_ID",
  appId: "APP_ID",
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
const storage = getStorage(app);

// ==========================
// üíÑ (Opcional) SLOTS FIXOS POR DIA
// ==========================
// Mantivemos 4 hor√°rios fixos por dia, com 2h30 entre eles
const SLOTS = ["09:00", "11:30", "14:00", "16:30"];

// ==========================
// üóìÔ∏è UTILIT√ÅRIOS DE DATA
// ==========================
function toISODate(d) {
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, "0");
  const day = String(d.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}

function firstAndLastDayOfMonth(year, monthIdx /* 0-11 */) {
  const first = new Date(year, monthIdx, 1);
  const last = new Date(year, monthIdx + 1, 0);
  return { first: toISODate(first), last: toISODate(last) };
}

function isMonToSat(d) {
  const dow = d.getDay(); // 0=Dom, 6=S√°b
  return dow >= 1 && dow <= 6;
}

function generateMonthDays(year, monthIdx) {
  const days = [];
  const d = new Date(year, monthIdx, 1);
  while (d.getMonth() === monthIdx) {
    if (isMonToSat(d)) days.push(toISODate(d));
    d.setDate(d.getDate() + 1);
  }
  return days;
}

// ==========================
// üîí Componente de Login Admin
// ==========================
function AdminLogin({ onLoggedIn }) {
  const [email, setEmail] = useState("");
  const [senha, setSenha] = useState("");
  const [loading, setLoading] = useState(false);
  const [erro, setErro] = useState("");

  const handleLogin = async (e) => {
    e.preventDefault();
    setErro("");
    setLoading(true);
    try {
      await signInWithEmailAndPassword(auth, email, senha);
      onLoggedIn?.();
    } catch (err) {
      setErro("Falha no login. Verifique as credenciais.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-sm mx-auto bg-white rounded-2xl shadow p-6">
      <h2 className="text-xl font-semibold mb-4 text-center">Entrar no Painel</h2>
      <form onSubmit={handleLogin} className="space-y-3">
        <input
          className="w-full border rounded-xl p-3"
          type="email"
          placeholder="E-mail"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          className="w-full border rounded-xl p-3"
          type="password"
          placeholder="Senha"
          value={senha}
          onChange={(e) => setSenha(e.target.value)}
          required
        />
        {erro && <p className="text-red-600 text-sm">{erro}</p>}
        <button
          type="submit"
          disabled={loading}
          className="w-full rounded-2xl shadow px-4 py-3 bg-emerald-600 text-white hover:bg-emerald-700"
        >
          {loading ? "Entrando‚Ä¶" : "Entrar"}
        </button>
      </form>
    </div>
  );
}

// ==========================
// üß∞ Actions Admin (Agendamentos)
// ==========================
async function cancelarAgendamento(id) {
  await deleteDoc(doc(db, "agendamentos", id));
}

async function alterarStatus(id, status) {
  await updateDoc(doc(db, "agendamentos", id), { status });
}

// ==========================
// üìä Painel Admin ‚Äì Lista de Agendamentos
// ==========================
function GridAgendamentos() {
  const [agendamentos, setAgendamentos] = useState([]);
  const [filtroServico, setFiltroServico] = useState("todos");
  const [filtroData, setFiltroData] = useState("");

  useEffect(() => {
    const qy = query(collection(db, "agendamentos"), orderBy("dia"), orderBy("hora"));
    const unsub = onSnapshot(qy, (snap) => {
      const dados = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setAgendamentos(dados);
    });
    return () => unsub();
  }, []);

  // Carrega servi√ßos para o filtro
  const [servicos, setServicos] = useState([]);
  useEffect(() => {
    const qy = query(collection(db, "servicos"), where("ativo", "==", true));
    const unsub = onSnapshot(qy, (snap) => {
      setServicos(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return () => unsub();
  }, []);

  const filtrados = useMemo(() => {
    return agendamentos.filter((a) => {
      const okServico =
        filtroServico === "todos" || a.servicoId === filtroServico;
      const okData = !filtroData || a.dia === filtroData;
      return okServico && okData;
    });
  }, [agendamentos, filtroServico, filtroData]);

  return (
    <div className="space-y-6">
      <div className="grid gap-3 md:grid-cols-3">
        <select
          className="border rounded-xl p-3"
          value={filtroServico}
          onChange={(e) => setFiltroServico(e.target.value)}
        >
          <option value="todos">Todos os servi√ßos</option>
          {servicos.map((s) => (
            <option key={s.id} value={s.id}>
              {s.nome}
            </option>
          ))}
        </select>
        <input
          className="border rounded-xl p-3"
          type="date"
          value={filtroData}
          onChange={(e) => setFiltroData(e.target.value)}
        />
        <div className="p-3 bg-white rounded-xl shadow">
          <p className="text-sm text-gray-600">Total exibido</p>
          <p className="text-2xl font-bold">{filtrados.length}</p>
        </div>
      </div>

      <div className="overflow-x-auto bg-white rounded-2xl shadow">
        <table className="min-w-full">
          <thead>
            <tr className="bg-pink-600 text-white">
              <th className="p-3 text-left">Servi√ßo</th>
              <th className="p-3">Valor</th>
              <th className="p-3">Data</th>
              <th className="p-3">Hora</th>
              <th className="p-3">Cliente</th>
              <th className="p-3">Telefone</th>
              <th className="p-3">Status</th>
              <th className="p-3">A√ß√µes</th>
            </tr>
          </thead>
          <tbody>
            {filtrados.map((a) => (
              <tr key={a.id} className="border-b">
                <td className="p-3">{a.servicoNome}</td>
                <td className="p-3 text-center">{a.preco != null ? `R$ ${a.preco}` : "‚Äî"}</td>
                <td className="p-3 text-center">{a.dia}</td>
                <td className="p-3 text-center">{a.hora}</td>
                <td className="p-3">{a.nome}</td>
                <td className="p-3">{a.telefone}</td>
                <td className="p-3 text-center">
                  <span
                    className={`px-2 py-1 rounded text-xs ${
                      a.status === "confirmado"
                        ? "bg-emerald-100 text-emerald-700"
                        : a.status === "pendente"
                        ? "bg-yellow-100 text-yellow-700"
                        : "bg-gray-100 text-gray-700"
                    }`}
                  >
                    {a.status || "pendente"}
                  </span>
                </td>
                <td className="p-3 space-x-2 text-center">
                  {a.status !== "confirmado" && (
                    <button
                      onClick={() => alterarStatus(a.id, "confirmado")}
                      className="px-3 py-1 rounded bg-emerald-600 text-white"
                    >
                      Confirmar
                    </button>
                  )}
                  <button
                    onClick={() => cancelarAgendamento(a.id)}
                    className="px-3 py-1 rounded bg-rose-600 text-white"
                  >
                    Cancelar
                  </button>
                </td>
              </tr>
            ))}
            {filtrados.length === 0 && (
              <tr>
                <td className="p-6 text-center text-gray-500" colSpan={8}>
                  Nenhum agendamento encontrado.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// ==========================
// üßæ Painel Admin ‚Äì CRUD de Servi√ßos
// ==========================
function PainelServicos() {
  const [servicos, setServicos] = useState([]);
  const [form, setForm] = useState({ nome: "", preco: "", imagemFile: null, ativo: true });
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    const qy = query(collection(db, "servicos"), orderBy("nome"));
    const unsub = onSnapshot(qy, (snap) => {
      setServicos(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return () => unsub();
  }, []);

  async function handleCreate(e) {
    e.preventDefault();
    if (!form.nome.trim()) return;
    setSaving(true);

    // cria ID e doc
    const newId = doc(collection(db, "servicos")).id;
    let imagemURL = "";

    if (form.imagemFile) {
      const ref = storageRef(storage, `servicos/${newId}-${Date.now()}`);
      await uploadBytes(ref, form.imagemFile);
      imagemURL = await getDownloadURL(ref);
    }

    await setDoc(doc(db, "servicos", newId), {
      nome: form.nome.trim(),
      // pre√ßo opcional; salva como number ou null
      preco: form.preco === "" ? null : Number(form.preco),
      imagem: imagemURL,
      ativo: !!form.ativo,
      criadoEm: new Date().toISOString(),
    });

    setForm({ nome: "", preco: "", imagemFile: null, ativo: true });
    setSaving(false);
  }

  async function handleUpdate(s, patch) {
    await updateDoc(doc(db, "servicos", s.id), patch);
  }

  async function handleUpdateImage(s, file) {
    if (!file) return;
    const ref = storageRef(storage, `servicos/${s.id}-${Date.now()}`);
    await uploadBytes(ref, file);
    const url = await getDownloadURL(ref);
    await updateDoc(doc(db, "servicos", s.id), { imagem: url });
  }

  async function handleDelete(id) {
    if (!confirm("Deseja excluir este servi√ßo?")) return;
    await deleteDoc(doc(db, "servicos", id));
  }

  return (
    <div className="space-y-8">
      <div className="bg-white rounded-2xl shadow p-5">
        <h3 className="text-lg font-semibold mb-3">Adicionar novo servi√ßo</h3>
        <form onSubmit={handleCreate} className="grid md:grid-cols-4 gap-3">
          <input
            className="border rounded-xl p-3 md:col-span-2"
            placeholder="Nome do servi√ßo"
            value={form.nome}
            onChange={(e) => setForm((f) => ({ ...f, nome: e.target.value }))}
            required
          />
          <input
            className="border rounded-xl p-3"
            type="number"
            min="0"
            step="0.01"
            placeholder="Pre√ßo (opcional)"
            value={form.preco}
            onChange={(e) => setForm((f) => ({ ...f, preco: e.target.value }))}
          />
          <input
            type="file"
            accept="image/*"
            className="border rounded-xl p-3"
            onChange={(e) => setForm((f) => ({ ...f, imagemFile: e.target.files?.[0] || null }))}
          />
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={form.ativo}
              onChange={(e) => setForm((f) => ({ ...f, ativo: e.target.checked }))}
            />
            Ativo
          </label>
          <button
            className="rounded-2xl px-4 py-3 bg-emerald-600 text-white hover:bg-emerald-700 md:col-span-4"
            disabled={saving}
            type="submit"
          >
            {saving ? "Salvando‚Ä¶" : "Adicionar"}
          </button>
        </form>
      </div>

      <div className="grid gap-4 md:grid-cols-3">
        {servicos.map((s) => (
          <div key={s.id} className="bg-white rounded-2xl shadow p-4">
            {s.imagem ? (
              <img src={s.imagem} alt={s.nome} className="w-full h-44 object-cover rounded-xl" />
            ) : (
              <div className="w-full h-44 bg-gray-100 rounded-xl flex items-center justify-center text-gray-400">
                sem imagem
              </div>
            )}
            <div className="mt-3 space-y-2">
              <input
                className="border rounded-xl p-2 w-full"
                value={s.nome}
                onChange={(e) => handleUpdate(s, { nome: e.target.value })}
              />
              <input
                className="border rounded-xl p-2 w-full"
                type="number"
                min="0"
                step="0.01"
                value={s.preco ?? ""}
                placeholder="Pre√ßo (opcional)"
                onChange={(e) => handleUpdate(s, { preco: e.target.value === "" ? null : Number(e.target.value) })}
              />
              <div className="flex items-center justify-between">
                <label className="text-sm text-gray-600 flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={!!s.ativo}
                    onChange={(e) => handleUpdate(s, { ativo: e.target.checked })}
                  />
                  Ativo
                </label>
                <button
                  onClick={() => handleDelete(s.id)}
                  className="px-3 py-1 rounded bg-rose-600 text-white"
                >
                  Excluir
                </button>
              </div>
              <div>
                <input
                  type="file"
                  accept="image/*"
                  onChange={(e) => handleUpdateImage(s, e.target.files?.[0] || null)}
                />
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// ==========================
// üõçÔ∏è Site do Cliente (Agendamento)
// ==========================
function SiteCliente() {
  const [servicos, setServicos] = useState([]);
  const [servicoId, setServicoId] = useState(null);
  const servico = servicos.find((s) => s.id === servicoId) || null;

  useEffect(() => {
    // Lista servi√ßos ativos em tempo real
    const qy = query(collection(db, "servicos"), where("ativo", "==", true), orderBy("nome"));
    const unsub = onSnapshot(qy, (snap) => {
      setServicos(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return () => unsub();
  }, []);

  const today = new Date();
  const [year, setYear] = useState(today.getFullYear());
  const [monthIdx, setMonthIdx] = useState(today.getMonth()); // 0-11
  const diasMes = useMemo(() => generateMonthDays(year, monthIdx), [year, monthIdx]);

  // Mapa de slots ocupados por dia (para o m√™s vis√≠vel)
  const [ocupadosPorDia, setOcupadosPorDia] = useState({});

  useEffect(() => {
    const { first, last } = firstAndLastDayOfMonth(year, monthIdx);
    const qy = query(
      collection(db, "agendamentos"),
      where("dia", ">=", first),
      where("dia", "<=", last)
    );
    const unsub = onSnapshot(qy, (snap) => {
      const busy = {};
      snap.forEach((d) => {
        const a = d.data();
        busy[a.dia] = busy[a.dia] || new Set();
        busy[a.dia].add(a.hora);
      });
      const obj = Object.fromEntries(
        Object.entries(busy).map(([k, v]) => [k, Array.from(v)])
      );
      setOcupadosPorDia(obj);
    });
    return () => unsub();
  }, [year, monthIdx]);

  const [diaEscolhido, setDiaEscolhido] = useState("");
  const [horaEscolhida, setHoraEscolhida] = useState("");
  const [nome, setNome] = useState("");
  const [telefone, setTelefone] = useState("");
  const [statusMsg, setStatusMsg] = useState("");
  const [saving, setSaving] = useState(false);

  const diasDisponiveis = useMemo(() => {
    // Esconde dias que estiverem 100% ocupados
    return diasMes.filter((dia) => {
      const ocup = ocupadosPorDia[dia] || [];
      return ocup.length < SLOTS.length;
    });
  }, [diasMes, ocupadosPorDia]);

  const horasDisponiveis = useMemo(() => {
    if (!diaEscolhido) return [];
    const ocup = new Set(ocupadosPorDia[diaEscolhido] || []);
    return SLOTS.filter((h) => !ocup.has(h));
  }, [diaEscolhido, ocupadosPorDia]);

  async function reservar() {
    if (!servico || !diaEscolhido || !horaEscolhida || !nome || !telefone) {
      setStatusMsg("Preencha todos os campos.");
      return;
    }
    setSaving(true);
    setStatusMsg("");

    // DocID √∫nico por data+hora para evitar dupla reserva no mesmo slot
    const docId = `${diaEscolhido}_${horaEscolhida}`; // global por slot
    const ref = doc(db, "agendamentos", docId);

    try {
      await runTransaction(db, async (tx) => {
        const snap = await tx.get(ref);
        if (snap.exists()) {
          throw new Error("Este hor√°rio acabou de ser reservado. Escolha outro.");
        }
        tx.set(ref, {
          servicoId: servico.id,
          servicoNome: servico.nome,
          preco: servico.preco ?? null,
          dia: diaEscolhido,
          hora: horaEscolhida,
          nome,
          telefone,
          status: "pendente",
          criadoEm: new Date().toISOString(),
        });
      });
      setStatusMsg("‚úÖ Agendamento realizado! Voc√™ receber√° a confirma√ß√£o.");
      setHoraEscolhida("");
    } catch (e) {
      setStatusMsg(e.message || "Erro ao reservar.");
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-pink-700">üíñ Agendamento de C√≠lios</h1>
        <p className="text-gray-600">Escolha o servi√ßo, o dia e o hor√°rio dispon√≠veis</p>
      </div>

      {/* Cards de Servi√ßo */}
      <div className="grid gap-5 md:grid-cols-3">
        {servicos.map((s) => (
          <div
            key={s.id}
            className={`bg-white rounded-2xl shadow p-4 ${servicoId === s.id ? "ring-2 ring-pink-500" : ""}`}
          >
            {s.imagem ? (
              <img alt={s.nome} src={s.imagem} className="w-full h-44 object-cover rounded-xl" />
            ) : (
              <div className="w-full h-44 bg-gray-100 rounded-xl flex items-center justify-center text-gray-400">
                sem imagem
              </div>
            )}
            <h3 className="mt-3 text-lg font-semibold">{s.nome}</h3>
            {/* Exibe valor somente se estiver cadastrado */}
            {s.preco != null && <p className="text-xl font-bold mt-1">R$ {s.preco}</p>}
            <button
              className="mt-3 w-full rounded-2xl bg-pink-600 text-white py-2 hover:bg-pink-700"
              onClick={() => {
                setServicoId(s.id);
                setDiaEscolhido("");
                setHoraEscolhida("");
              }}
            >
              {servicoId === s.id ? "Selecionado" : "Selecionar"}
            </button>
          </div>
        ))}
        {servicos.length === 0 && (
          <div className="text-center text-gray-500 md:col-span-3">
            Nenhum servi√ßo ativo no momento.
          </div>
        )}
      </div>

      {/* Navega√ß√£o do m√™s */}
      <div className="flex items-center gap-3 justify-center">
        <button
          className="px-3 py-2 rounded-xl bg-gray-200"
          onClick={() => {
            const prev = new Date(year, monthIdx - 1, 1);
            setYear(prev.getFullYear());
            setMonthIdx(prev.getMonth());
            setDiaEscolhido("");
            setHoraEscolhida("");
          }}
        >
          ‚óÄ M√™s anterior
        </button>
        <div className="font-semibold">
          {new Date(year, monthIdx, 1).toLocaleDateString("pt-BR", {
            month: "long",
            year: "numeric",
          })}
        </div>
        <button
          className="px-3 py-2 rounded-xl bg-gray-200"
          onClick={() => {
            const next = new Date(year, monthIdx + 1, 1);
            setYear(next.getFullYear());
            setMonthIdx(next.getMonth());
            setDiaEscolhido("");
            setHoraEscolhida("");
          }}
        >
          Pr√≥ximo m√™s ‚ñ∂
        </button>
      </div>

      {/* Sele√ß√£o de dia */}
      <div>
        <h3 className="text-lg font-semibold mb-2">Dias dispon√≠veis</h3>
        <div className="flex flex-wrap gap-2">
          {diasDisponiveis.map((dia) => (
            <button
              key={dia}
              className={`px-3 py-2 rounded-xl ${
                diaEscolhido === dia ? "bg-pink-600 text-white" : "bg-gray-200"
              }`}
              onClick={() => {
                setDiaEscolhido(dia);
                setHoraEscolhida("");
              }}
            >
              {new Date(dia).toLocaleDateString("pt-BR", { weekday: "short", day: "2-digit" })}
            </button>
          ))}
          {diasDisponiveis.length === 0 && (
            <p className="text-gray-500">Sem dias dispon√≠veis neste m√™s.</p>
          )}
        </div>
      </div>

      {/* Sele√ß√£o de hor√°rio */}
      {diaEscolhido && (
        <div>
          <h3 className="text-lg font-semibold mb-2">
            Hor√°rios para {new Date(diaEscolhido).toLocaleDateString("pt-BR")}
          </h3>
          <div className="flex flex-wrap gap-2">
            {horasDisponiveis.map((h) => (
              <button
                key={h}
                className={`px-3 py-2 rounded-xl ${
                  horaEscolhida === h ? "bg-pink-600 text-white" : "bg-gray-200"
                }`}
                onClick={() => setHoraEscolhida(h)}
              >
                {h}
              </button>
            ))}
            {horasDisponiveis.length === 0 && (
              <p className="text-gray-500">Sem hor√°rios dispon√≠veis neste dia.</p>
            )}
          </div>
        </div>
      )}

      {/* Formul√°rio de dados do cliente */}
      {servico && diaEscolhido && horaEscolhida && (
        <div className="bg-white rounded-2xl shadow p-5">
          <h3 className="text-lg font-semibold mb-3">Finalize seu agendamento</h3>
          <div className="grid md:grid-cols-2 gap-3">
            <input
              className="border rounded-xl p-3"
              placeholder="Seu nome"
              value={nome}
              onChange={(e) => setNome(e.target.value)}
            />
            <input
              className="border rounded-xl p-3"
              placeholder="Seu telefone"
              value={telefone}
              onChange={(e) => setTelefone(e.target.value)}
            />
          </div>
          <div className="mt-3 text-sm text-gray-600">
            <p>
              <strong>Servi√ßo:</strong> {servico.nome} ‚Äî {servico.preco != null && (<><strong>Valor:</strong> {`R$ ${servico.preco}`}</>)}
            </p>
            <p>
              <strong>Data:</strong> {new Date(diaEscolhido).toLocaleDateString("pt-BR")} ‚Äî <strong>Hora:</strong> {horaEscolhida}
            </p>
          </div>
          <div className="mt-4 flex items-center gap-3">
            <button
              disabled={saving}
              onClick={reservar}
              className="rounded-2xl px-5 py-3 bg-emerald-600 text-white hover:bg-emerald-700"
            >
              {saving ? "Salvando‚Ä¶" : "Confirmar agendamento"}
            </button>
            {statusMsg && <span className="text-sm">{statusMsg}</span>}
          </div>
        </div>
      )}
    </div>
  );
}

// ==========================
// üì¶ Painel/Admin Wrapper (Tabs)
// ==========================
function PainelAdmin() {
  const [user, setUser] = useState(null);
  const [tab, setTab] = useState("agendamentos");

  useEffect(() => {
    const unsub = onAuthStateChanged(auth, (u) => setUser(u));
    return () => unsub();
  }, []);

  if (!user) return <AdminLogin />;

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">Painel</h2>
        <button
          onClick={() => signOut(auth)}
          className="rounded-xl px-4 py-2 bg-gray-800 text-white"
        >
          Sair
        </button>
      </div>

      <div className="bg-white rounded-2xl shadow p-2 flex gap-2 w-full">
        <button
          className={`flex-1 px-4 py-3 rounded-xl ${
            tab === "agendamentos" ? "bg-pink-600 text-white" : "bg-gray-100"
          }`}
          onClick={() => setTab("agendamentos")}
        >
          Agendamentos
        </button>
        <button
          className={`flex-1 px-4 py-3 rounded-xl ${
            tab === "servicos" ? "bg-pink-600 text-white" : "bg-gray-100"
          }`}
          onClick={() => setTab("servicos")}
        >
          Servi√ßos (CRUD)
        </button>
      </div>

      {tab === "agendamentos" ? <GridAgendamentos /> : <PainelServicos />}
    </div>
  );
}

// ==========================
// üß≠ App com troca de abas (Site \u2194 Painel)
// ==========================
export default function App() {
  const [tab, setTab] = useState("site");
  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-6xl mx-auto space-y-6">
        <div className="bg-white rounded-2xl shadow p-2 flex gap-2">
          <button
            className={`flex-1 px-4 py-3 rounded-xl ${
              tab === "site" ? "bg-pink-600 text-white" : "bg-gray-100"
            }`}
            onClick={() => setTab("site")}
          >
            Site de Agendamento
          </button>
          <button
            className={`flex-1 px-4 py-3 rounded-xl ${
              tab === "admin" ? "bg-pink-600 text-white" : "bg-gray-100"
            }`}
            onClick={() => setTab("admin")}
          >
            Painel Admin
          </button>
        </div>

        {tab === "site" ? <SiteCliente /> : <PainelAdmin />}

        <footer className="text-center text-sm text-gray-500">
          BelezaClick ‚Äî agendamentos em tempo real (Firebase)
        </footer>
      </div>
    </div>
  );
}
